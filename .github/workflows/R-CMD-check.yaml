on:
  workflow_call:
    inputs:
      extra-packages:
        type: string
        default: ""
        required: false
      cache-version:
        type: string
        default: "2"
        required: false
      pandoc-version:
        type: string
        default: "3.x"
        required: false
      extra-check-args:
        type: string
        # default: '"--run-donttest", "--no-manual", "--as-cran"'
        default: "NULL"
        required: false
      macOS:
        type: string
        default: "macOS-latest"
        required: false
      windows:
        type: string
        default: "windows-latest"
        required: false
      ubuntu:
        type: string
        required: false
        # To test more versions, they must be separated by a space. Ex: `"ubuntu-18.04 ubuntu-20.04`
        default: ubuntu-latest
      minimum-r-version:
        type: string
        required: false
        default: ""
      force-windows-src:
        type: boolean
        required: false
        default: false
      rtools-40:
        type: boolean
        default: true
        required: false
      upload-snapshots:
        type: boolean
        default: true
        required: false
      working-directory:
        type: string
        default: "."
        required: false
      check-timeout-minutes:
        type: number
        default: 30
        required: false

name: R-CMD-check

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.config.outputs.config }}
    steps:
      # - name: devel
      #   id: devel
      #   uses: r-lib/actions/setup-r@v2
      #   with:
      #     r-version: devel
      #     install-r: false

      - name: release
        id: release
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: release
          install-r: false

      - name: oldrel-1
        id: oldrel-1
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: oldrel-1
          install-r: false

      - name: oldrel-2
        id: oldrel-2
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: oldrel-2
          install-r: false

      - name: oldrel-3
        id: oldrel-3
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: oldrel-3
          install-r: false

      - name: oldrel-4
        id: oldrel-4
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: oldrel-4
          install-r: false

      - name: Checkout GitHub repo
        uses: rstudio/shiny-workflows/.github/internal/checkout@v1

      # R is a pre-installed software
      - name: Config
        working-directory: ${{ inputs.working-directory }}
        # Run in pre-installed python to avoid 40s installing R
        id: config
        shell: python
        run: |
          import os
          import re
          import json

          mac = "${{ inputs.macOS }}"
          windows = "${{ inputs.windows }}"
          ubuntu_arr = re.split(r'[,\s]+', "${{ inputs.ubuntu }}")
          has_src = os.path.isdir("src")
          min_r_ver = "${{ inputs.minimum-r-version }}"
          test_on_rtools40 = "${{ inputs.rtools-40 }}" == "true"
          force_windows_src = "${{ inputs.force-windows-src }}" == "true"
          if force_windows_src:
              has_src = True

          rver = {
              # When R 4.3 was released, R version 4.4.0 was not recognized.
              # However, `"devel"` is recognized within `r-lib/actions/setup-r`.
              "devel": "devel",
              "release": "${{ steps.release.outputs.installed-r-version }}",
              "oldrel1": "${{ steps.oldrel-1.outputs.installed-r-version }}",
              "oldrel2": "${{ steps.oldrel-2.outputs.installed-r-version }}",
              "oldrel3": "${{ steps.oldrel-3.outputs.installed-r-version }}",
              "oldrel4": "${{ steps.oldrel-4.outputs.installed-r-version }}"
          }

          def job(os, r, **kwargs):
              result = {"os": os, "r": r}
              result.update(kwargs)
              return result

          def is_valid_os(os, r_ver=""):
              if os == "false":
                  return False
              if os == "":
                  return False
              if len(r_ver) == 0 or len(min_r_ver) == 0:
                  return True
              if r_ver == "devel":
                  return True
              return r_ver >= min_r_ver

          config = []

          ## macOS
          if is_valid_os(mac, rver["release"]):
              config.append(job(mac, rver["release"]))

          ## Windows
          if has_src and is_valid_os(windows, "devel"):
              config.append(job(windows, "devel"))
          if is_valid_os(windows, rver["release"]):
              config.append(job(windows, rver["release"]))
          if has_src and is_valid_os(windows, "4.4"):
              config.append(job(windows, "4.4", **{"rtools-version": "44"}))
          if has_src and is_valid_os(windows, "4.3"):
              config.append(job(windows, "4.3", **{"rtools-version": "43"}))
          if has_src and is_valid_os(windows, "4.2"):
              config.append(job(windows, "4.2", **{"rtools-version": "42"}))
          if has_src and test_on_rtools40 and is_valid_os(windows, "4.1"):
              config.append(job(windows, "4.1", **{"rtools-version": "40"}))

          # Ubuntu
          if is_valid_os(ubuntu_arr[0], rver["devel"]):
              config.append(job(ubuntu_arr[0], rver["devel"], **{"http-user-agent": "release"}))
          if is_valid_os(ubuntu_arr[0]):
              for ubuntu_ in ubuntu_arr:
                  if is_valid_os(ubuntu_, rver["release"]):
                      config.append(job(ubuntu_, rver["release"]))
                  if is_valid_os(ubuntu_, rver["oldrel1"]):
                      config.append(job(ubuntu_, rver["oldrel1"]))
                  if is_valid_os(ubuntu_, rver["oldrel2"]):
                      config.append(job(ubuntu_, rver["oldrel2"]))
                  if is_valid_os(ubuntu_, rver["oldrel3"]):
                      config.append(job(ubuntu_, rver["oldrel3"]))
                  if is_valid_os(ubuntu_, rver["oldrel4"]):
                      config.append(job(ubuntu_, rver["oldrel4"]))

          # Convert to JSON
          config_json = json.dumps(config)
          print(f"Config:\n{config_json}")

          # Write to GitHub output
          with open(os.environ.get("GITHUB_OUTPUT", ""), "a") as env_file:
              env_file.write(f"config={config_json}\n")
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    needs: [setup]
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJSON(needs.setup.outputs.config) }}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout GitHub repo
        uses: rstudio/shiny-workflows/.github/internal/checkout@v1

      - name: Install R, system dependencies, and package dependencies
        uses: rstudio/shiny-workflows/setup-r-package@v1
        with:
          working-directory: ${{ inputs.working-directory }}
          rtools-version: ${{ matrix.config.rtools-version }}
          pandoc-version: ${{ inputs.pandoc-version }}
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          cache-version: ${{ inputs.cache-version }}
          needs: check
          extra-packages: |
            any::rcmdcheck
            ${{ inputs.extra-packages }}

      - name: Check package
        uses: r-lib/actions/check-r-package@v2
        timeout-minutes: ${{ inputs.check-timeout-minutes }}
        with:
          working-directory: ${{ inputs.working-directory }}
          check-dir: '"check"' # matches directory below
          args: 'c(${{ inputs.extra-check-args }}, "--no-manual", "--as-cran")'
          upload-snapshots: ${{ inputs.upload-snapshots }}
          # Use the cache-version to separate the results from other checks with the same setup.
          artifact-name: ${{ format('{0}-{1}-r{2}-{3}-{4}-results', runner.os, runner.arch, matrix.config.r, inputs.cache-version, matrix.config.id || strategy.job-index ) }}
          snapshot-artifact-name: ${{ format('{0}-{1}-r{2}-{3}-{4}-testthat-snapshots', runner.os, runner.arch, matrix.config.r, inputs.cache-version, matrix.config.id || strategy.job-index ) }}

      - name: "Show `testthat` output"
        working-directory: ${{ inputs.working-directory }}
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash
      - name: "Show install logs"
        working-directory: ${{ inputs.working-directory }}
        if: always()
        run: find check -name '00install.out' -exec cat '{}' \; || true
        shell: bash
      - name: "Upload 'Check package' results"
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.config.os }}-r${{ matrix.config.r }}-results
          path: "${{ inputs.working-directory }}/check"

      # > If the workflow run is a re-run, with debugging enabled, then it opens a tmate shell that you can ssh into for interactive debugging.
      # > It uses https://github.com/mxschmitt/action-tmate internally.
      # Usage:
      # * Add your SSH key to your GitHub account. This action does not work without an SSH key.
      # * If a workflow run fails, on the web UI select a re-run and turn on debug logging.
      # * Wait until the workflow output tells you that the tmate shell is ready, and copy paste the random hostname.
      # * Use ssh to log in to the VM.
      - name: Debug GHA job (tmate)
        uses: r-hub/actions/debug-shell@v1
        # Use `always()` as the action will skip its steps internally if debugging is not enabled and the workflow is not a re-run.
        if: always()
        with:
          connect-timeout-seconds: "600"
