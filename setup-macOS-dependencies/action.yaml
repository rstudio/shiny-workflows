name: 'Install macOS brew dependencies'
description: 'Install all brew dependencies given the family tree. This is a poor mans version of package manager until it gets mac support'
author: 'Barret Schloerke'
inputs:
  needs:
    default: ""
    description: "Name of config to search in `DESCRIPTION` file. Ex: `website`"
    required: false
  extra-packages:
    default: ""
    description: String of extra packages
    required: false
  pak-version:
    description: |
      Which pak version to use. Possible values are "stable", "rc",
      "devel".
    default: "stable"
    required: false
  working-directory:
    default: "."
    description: 'Working directory for the action. Defaults to the root of the repository.'
    required: false
runs:
  using: "composite"
  steps:
    - name: Brew dependencies
      id: brew-deps
      working-directory: ${{ inputs.working-directory }}
      shell: Rscript {0}
      run: |
        if (!identical(Sys.getenv("RUNNER_OS", "NOT MAC"), "macOS")) {
          return()
        }

        cat("::group::Install macOS system dependencies\n")

        # TODO-future; Find a way to not use `pak`? Hopefully RSPM will handle this in the future
        if (!require("pak", quietly = TRUE, character.only = TRUE)) {
          options(pak.no_extra_messages = TRUE)
          install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/${{ inputs.pak-version }}/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))
        }
        message("pak installed")
        print(packageDescription("pak"))

            message("Installing otelsdk")
            install.packages("otelsdk", repos = "https://cloud.r-project.org")
        if (any(
          grepl("url::", "${{ inputs.extra-packages }}", fixed = TRUE),
          file.exists("DESCRIPTION") &&
            any(grepl("url::", readLines("DESCRIPTION"), fixed = TRUE))
        )) {
          message("installing digest")
          # Need for url remotes. See https://github.com/r-lib/actions/issues/562#issuecomment-1129088041
          install.packages("digest", repos = "http://cran.us.r-project.org")
          message("installed digest")
        }

        message("here1")
        pkg_deps <- NULL
        if (file.exists("DESCRIPTION")) {
          # Get packages like `{grDevices}` which will not be returned by `{pak}`
          message("looking in desc-0")
          desc <- as.list(read.dcf("DESCRIPTION")[1,,drop=TRUE])
          message("looking in desc-1")
          desc_pkgs <- desc[c("Imports", "Depends", "Suggests", "Enhances", "LinkingTo")]
          str(desc_pkgs)
          pkg_names <- lapply(desc_pkgs[!vapply(desc_pkgs, is.null, logical(1))], function(txt) {
            pkg_txt <- strsplit(txt, "\n")[[1]]
            pkg_parts <- strsplit(pkg_txt, "[ (,]")
            lapply(pkg_parts, `[[`, 1)
          })
          pkg_names <- sort(unique(unname(unlist(pkg_names))))
          pkg_names <- setdiff(pkg_names, "R")

          # Local deps
          message("pkg_names")
          str(pkg_names)
          local_dev_deps <- pak::local_dev_deps()[["package"]]
          message("local_dev_deps")
          str(local_dev_deps)
          pkg_deps <- c(pkg_deps, pkg_names, local_dev_deps)
        }
        message("here-get_pkg_deps()")
        get_pkg_deps <- function(txt) {
          message("getting pkg deps: ", txt)
          pkgs <- strsplit(txt, "[[:space:],]+")[[1]]
          unlist(lapply(pkgs, function(x) {
            message("here-get_pkg_deps() - ", x)
            # Use try catch to avoid dep finding errors;
            tryCatch({
              pak::pkg_deps(x)[["package"]]
            }, error = function(e) {
              message("Error in get_pkg_deps('", x, "'): ", conditionMessage(e))
              NULL
            })
          }))
        }
        message("here-needs")
        # Needs deps; Must find all dependencies of of the needs pkgs
        if (nzchar("${{ inputs.needs }}") && file.exists("DESCRIPTION")) {
          needs_pkgs <- as.list(read.dcf("DESCRIPTION")[1,])[["Config/Needs/${{ inputs.needs }}"]]
          if (!is.null(needs_pkgs)) {
            pkg_deps <- c(pkg_deps, get_pkg_deps(needs_pkgs))
          }
        }
        message("here-extra")
        # Extra package deps
        if (nzchar("${{ inputs.extra-packages }}")) {
          pkg_deps <- c(pkg_deps, get_pkg_deps("${{ inputs.extra-packages }}"))
        }
        pkg_deps <- unique(pkg_deps)
        cat("Packages found:\n"); print(pkg_deps)

        if ("otelsdk" %in% pkg_deps) {
          cat("needs-rhub-r-sysreqs=true\n", file = Sys.getenv("GITHUB_OUTPUT"), append = TRUE)
        }

        brew_list <- list(
          Cairo = c("libxt", "--cask xquartz", "cairo"),
          FreeType = "freetype",
          RMySQL = c("mariadb-connector-c"),
          grDevices = c("libxt", "--cask xquartz", "cairo"),
          rgdal = c("pkg-config", "proj", "gdal"),
          rgeos = "geos",
          terra = c("pkg-config", "proj", "geos", "gdal", "sqlite"),
          textshaping = c("harfbuzz", "fribidi"),
          units = "udunits"
        )
        cmds <- unique(unname(unlist(
          brew_list[names(brew_list) %in% pkg_deps]
        )))
        # If the package exists, run the brew install commands
        if (length(cmds) > 0) {
          # Make sure brew linking overwrites any links created. e.g. python's 2to3
          cmds <- ifelse(grepl("--cask ", cmds), cmds, paste0("--overwrite ", cmds))

          # Make sure exit is success
          lapply(paste0("brew install ", cmds), function(cmd) {
            message(cmd)
            stopifnot(system(cmd) == 0)
            cmd
          })
        }

    - name: Install rhub-r-sysreqs
      if: ${{ steps.brew-deps.outputs.needs-rhub-r-sysreqs == 'true' }}
      uses: r-hub/actions/setup-r-sysreqs@v1
